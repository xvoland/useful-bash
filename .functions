function dir() {
	du -sh * | sort -rh
}

function countArituments() {
    echo "${#@}"
}

# NGINX start/stop/restart
function nginx_start() {
	brew services start php

	# nginx_php_start()
	# sudo brew services start nginx-full

	brew services start nginx
}

function nginx_restart() {
	apache-stop
	# sudo brew services restart nginx-full
	brew services restart nginx
}

function nginx_stop() {
	# sudo brew services stop nginx-full
	brew services stop nginx
}

function nginx_path() {
	cd /usr/local/etc/nginx
}

function nginx_cd() {
	nginx_path
}

function nginx_conf() {
	vim /usr/local/etc/nginx/nginx.conf
}

function nginx_servers() {
	cd /usr/local/etc/nginx/sites-enabled
}

function nginx_php_start() {
	sudo brew services start php
}

function nginx_php_stop() {
	sudo brew services stop php
}


function mysql_start() {
	brew services start mysql@5.7
}

function mysql_stop() {
	brew services stop mysql@5.7
}

function mysql_restart() {
	brew services restart mysql@5.7
}

function mysql_config() {
	vim /etc/my.cnf
}

function mysql_connect() {
	mysql -uroot
}

# transfer file to transfer.sh
# details on https://github.com/dutchcoders/transfer.sh/
# or https://transfer.sh/
function transfer() {
    curl --progress-bar --upload-file "$1" https://transfer.sh/$(basename $1) | tee /dev/null;
}

alias transfer=transfer


# Apache server functions
function apache-stop() {
	sudo apachectl stop
}

function apache-start() {
	sudo apachectl start
}

function apache-restart() {
	sudo apachectl restart
}

# Create a new directory and enter it
function md() {
        mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
    find . -name "$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
        local port="${1:-8000}"
        open "http://localhost:${port}/"
        # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
        # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
        python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
        mkdir -p "$1"
        git archive master | tar -x -C "$1"
}


# get gzipped size
function gz() {
        echo "orig size    (bytes): "
        cat "$1" | wc -c
        echo "gzipped size (bytes): "
        gzip -c "$1" | wc -c
}

# use extract <path/file_name>
#    if [ -f "$1" ] ; then
#        #NAME=${1%.*}
#		local nameInLowerCase=`echo "$1" | awk '{print tolower($0)}'`
#        #mkdir $NAME && cd $NAME
#		echo "test: $nameInLowerCase"

 
function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
    return 1
 else
    for n in $@
    do
      if [ -f "$n" ] ; then
          case "${n%,}" in
            *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar) 
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.rar)       unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.zip)       unzip ./"$n"       ;;
            *.z)         uncompress ./"$n"  ;;
            *.7z)        7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *)
                         echo "extract: '$n' - unknown archive method"
                         return 1
                         ;;
          esac
      else
          echo "'$n' - file does not exist"
          return 1
      fi
    done
fi
}



# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}


function console {
  modem=`ls -1 /dev/cu.* | grep -vi bluetooth | tail -1`
  baud=${1:-9600}
  if [ ! -z "$modem" ]; then
    minicom -D $modem  -b $baud
  else
    echo "No USB modem device found in /dev"
  fi
}


# Apple Protection ON/OFF
function protectionON {
  sudo spctl --master-enable
}

function protectionOFF {
  sudo spctl --master-disable
}



# remove/replace tags in video
function tag_remove_usage() {
	echo "Examples of usage:"
	echo -e "\t tag_remove <path_to_file> - remove all tags from video"
	echo -e "\t tag_remove -t [--tag] <path_to_file> <title> <comment>"
}

function videotag {
   if [ $# -lt 1 ]; then
	  tag_remove_usage
   fi

   if [[ $1 == "-h" || $1 == "--help" ]]; then
	  tag_remove_usage
   fi


  if [[ $1 == "-t" || $1 == "--tag" ]]; then
      if [ "$#" -ne 4 ]; then
		    tag_remove_usage
	    else	

        FILEFULL=$2
        FILE="${FILEFULL%.*}"
        EXT="${FILEFULL##*.}"
        OUTPUT="$FILE.$$.$EXT"

		ffmpeg -i $FILEFULL -vcodec copy -acodec copy -map_metadata -1 -metadata title="$3" -metadata comment="$4" "$OUTPUT"
      fi
  else

    FILEFULL=$1
    FILE="${FILEFULL%.*}"
    EXT="${FILEFULL##*.}"
    OUTPUT="$FILE.$$.$EXT"

  	if [ -f "$FILEFULL" ]; then
		  ffmpeg -i "$FILEFULL" -vcodec copy -acodec copy -map_metadata -1 -metadata title="F4ck 0ff" -metadata comment="" "$OUTPUT"
		else
			echo "$FILEFULL - does not exist!"
		fi
  fi
}

function mts2mp4 {
	ffmpeg -i $1 -c:v copy -c:a aac -strict experimental -b:a 128k "$1.mp4"
}

function mp4tomp3 {
	ffmpeg -i $1 -b:a 192K -vn $2
}

function video_all_x264 {
	for i in $1; do ffmpeg -i "$i" -c:a aac -b:a 128k -c:v libx264 -crf 20 "${i%.}_x264.mp4"; done
}

function video_all_x265 {
	for i in "$1"; do ffmpeg -i "$i" -map_metadata -1 -vsync 0 -c:v libx265 -crf 20 -b:v 15M -vtag hvc1 -movflags +faststart -c:a aac -b:a 192k -pix_fmt yuv420p "${i%.}_x265.mp4"; done
}

function video_all_hevc {
	for i in "$1"; do ffmpeg -i "$i" -map_metadata -1 -c:a aac_at -c:v libx265 -crf 20 -pix_fmt yuv420p -vf "scale=trun c(iw/2)*2:trunc(ih/2)*2" -strict experimental "${i%.}_hevc.mp4"; done
}

function videoto_x265 {
	ffmpeg -i "$1" -map_metadata -1 -vsync 0 -c:v libx265 -crf 20 -b:v 15M -vtag hvc1 -movflags +faststart -c:a aac -b:a 192k -metadata title="$2" -pix_fmt yuv420p "$2.x265.mp4"
}

function videoto_av1 {
	# mapping between H.264 -> AV1
	# 19 -> 27
	# 23 -> 33
	# 27 -> 39
	# 31 -> 45
	# 35 -> 51
	# 39 -> 57
	
	ffmpeg -i '$1' -map_metadata -1 -c:a libopus -c:v libaom-av1 -crf 30 -b:v 0 -pix_fmt yuv420p -vf 'scale=trunc(iw/2)*2:trunc(ih/2)*2' -strict experimental '$2.av1.mp4'
}

function videoto_hevc {
	ffmpeg -i '$1' -map_metadata -1 -c:a aac_at -c:v libx265 -crf 20 -pix_fmt yuv420p -vf 'scale=trun    c(iw/2)*2:trunc(ih/2)*2' -strict experimental '$2.hevc.mp4'
}

function videoto_h264 {
	ffmpeg -i '$1' -map_metadata -1 -c:a aac_at -c:v libx264 -crf 18 -profile:v main -pix_fmt yuv420p -vf 'scale=trunc(iw/2)*2:trunc(ih/2)*2' '$2.h264.mp4'
}

function allmtsto_x265 {
	IFS=$(echo -en '\n\b'); for i in *.MTS; do ffmpeg -i '$i' -vsync 0 -c:v libx265 -crf 18 -b:v 15M -vtag hvc1 -c:a aac_at -b:a 192k -pix_fmt yuv420p '$i.mp4'; done;
}

function allmtsto_h264 {
	IFS=$(echo -en '\n\b'); for i in *.MTS; do ffmpeg -i '$i' -vsync 0 -c:v h264_videotoolbox -crf 20 -c:a aac_at -b:a 192k -pix_fmt yuv420p '$i.mp4'; done;
}


function videoto_x264 {
	ffmpeg -i "$1" -vsync 0 -c:v h264_videotoolbox -b:v 20M -allow_sw 1 -map_metadata -1 -vsync 0 -c:a aac_at -b:a 192k -profile:v main -pix_fmt yuv420p -vf 'scale=trunc(iw/2)*2:trunc(ih/2)*2' '$2.x264.mp4'
}

function videoto_xhevc {
	ffmpeg -i "$1" -vsync 0 -c:v hevc_videotoolbox -crf 30 -allow_sw 1 -map_metadata -1 -vsync 0 -c:a aac_at -b:a 192k -profile:v main -pix_fmt yuv420p -vf 'scale=trunc(iw/2)*2:trunc(ih/2)*2' '$2.xhevc.mp4'
}


function video_cut {
  # example: video_cut <input_video.mp4> <time_in_seconds> <output_file_without_extension>
  ffmpeg -i $1 -c:v libx264 -segment_time $2 -g 9 -sc_threshold 0 -force_key_frames "expr:gte(t,n_forced*9)" -f segment -reset_timestamps 1 "$3_%03d.mp4"
}

function youtube_mp3 {
	yt-dlp -x 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' --audio-format mp3 $1
}

function youtube_mp4 {
	yt-dlp -F $1
	yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' --buffer-size 5M $1
}

function youtube_info {
	yt-dlp -F $1
}

function webptojpg {
	dwebp $1 -o $1.jpg
}

function towebp {
	cwebp -q 80 $1 -o $1.webp
}

function tree_size() {
	du -a * | sort -r -n | head -20
}

function sheet() {
  # all arguments in $@
  cht.sh $@
}

function git_update_all() {
	# ls | xargs -I{} git -C {} pull
  # for i in */.git; do ( echo $i; cd $i/..; git pull; ); done

	ls | xargs -P10 -I{} git -C {} pull
}
